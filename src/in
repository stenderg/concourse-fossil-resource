#!/usr/bin/env python3

import json
import sys

from shared import *

sys.tracebacklimit = 0

config_schema = {
    "source": {
        "url": "",
        "branch": ""
    },
    "version": {
        "ref": ""
    }
}

def main(path, config):
    validate_schema(config, config_schema)
    
    url = config["source"]["url"]
    branch = config["source"]["branch"]
    user = None
    password = None
    ref = config["version"]["ref"]

    if "user" in config["source"]:
        user = config["source"]["user"]

    if "password" in config["source"]:
        password = config["source"]["password"]

    # login erforderlich
    if user is not None and password is not None:
        pload = {"payload":{"name":user, "password":password}}
        if login(url, pload) is None:
            return None
    else:
        loginAnonym(url)

    # get tarball with cookie data
    tarFilePath = getTarball(path, url, ref, getCookieToken())
    if tarFilePath is None:
        return None

    os.system("tar -xf " + tarFilePath + " -C " + path)
    os.system("rm " + tarFilePath)

    return ref


path = sys.argv[1]
config = json.loads(sys.stdin.read())
eprint(config)

uuid = main(path, config)
if uuid is None:
    # delete token and next try to login
    delAuthTokens()
    uuid = main(path, config)

if uuid is not None:
    print(json.dumps({"version":{"ref": "%s" % uuid[0:10] },"metadata":[]}))
else:
    # empty version to keep Concourse happy
    print('[]')
exit(0)